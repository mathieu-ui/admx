# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Europe/Paris";

  # Select internationalisation properties.
  i18n.defaultLocale = "fr_FR.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "fr_FR.UTF-8";
    LC_IDENTIFICATION = "fr_FR.UTF-8";
    LC_MEASUREMENT = "fr_FR.UTF-8";
    LC_MONETARY = "fr_FR.UTF-8";
    LC_NAME = "fr_FR.UTF-8";
    LC_NUMERIC = "fr_FR.UTF-8";
    LC_PAPER = "fr_FR.UTF-8";
    LC_TELEPHONE = "fr_FR.UTF-8";
    LC_TIME = "fr_FR.UTF-8";
  };

  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the GNOME Desktop Environment.
  services.xserver.displayManager.gdm.enable = true;
  services.xserver.desktopManager.gnome.enable = true;

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "fr";
    variant = "";
  };

  # Configure console keymap
  console.keyMap = "fr";

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users = {
    pierre = {
      isNormalUser = true;
      description = "pierre";
      extraGroups = [ "networkmanager" "wheel" ];
      packages = with pkgs; [
      #  thunderbird
      ];
   };
   paul = {
      isNormalUser = true;
      description = "paul";
      extraGroups = [ "networkmanager" "wheel" ];
      packages = with pkgs; [
      #  thunderbird
      ];
   };
   jacques = {
      isNormalUser = true;
      description = "jaques";
      extraGroups = [ "networkmanager" "wheel" ];
      packages = with pkgs; [
      #  thunderbird
      ];
   };
    dovi = {
      isNormalUser = true;
      description = "dovi";
      extraGroups = [ "networkmanager" "wheel" ];
      packages = with pkgs; [
      #  thunderbird
      ];
    };
  };

  # Install firefox.
  programs.firefox.enable = true;

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    gnome.gnome-tweaks
    gnomeExtensions.appindicator
    gnomeExtensions.dash-to-dock
    gnomeExtensions.burn-my-windows
    gnomeExtensions.tiling-shell
    dconf 
    vim
    amberol
    wget
    mtr
    dstat
    htop
    gnome-tweaks
    kdePackages.breeze
    openssh  
    wget
  ];
  
  # HORLOGE
  systemd.user.services.gnome-clock-seconds = {
    description = "Afficher les secondes dans l'horloge GNOME";
    wantedBy = [ "default.target" ];
    script = ''
      ${pkgs.dconf}/bin/dconf write /org/gnome/desktop/interface/clock-show-seconds true
    '';
  };

  #FIREWALL

  networking.firewall.enable = false;

  networking.nftables = {
    enable = true;
    ruleset = ''
      table inet filter {
        chain input {
          type filter hook input priority 0; policy drop;
  
          # Autorise les connexions établies ou associées
          ct state established,related accept
  
          # Autorise l'interface loopback (localhost)
          iifname lo accept
  
          # Autorise ICMP (ping)
          ip protocol icmp accept
          ip6 nexthdr icmpv6 accept
  
          # Ports autorisés (22 SSH, 80 HTTP, 443 HTTPS)
          tcp dport {22, 80, 443} accept
        }
  
        chain forward {
          type filter hook forward priority 0; policy drop;
        }
  
        chain output {
          type filter hook output priority 0; policy accept;
        }
      }
    '';
  };

  # Flatpak
  services.flatpak.enable = true;  

  system.activationScripts.addFlathubRepo = {
    text = ''
      ${pkgs.flatpak}/bin/flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    '';
  };

  system.activationScripts.installFlatpakApps = {
    text = ''
      ${pkgs.flatpak}/bin/flatpak install -y --system flathub com.brave.Browser
      ${pkgs.flatpak}/bin/flatpak install -y --system flathub com.mattjakeman.ExtensionManager
    '';
  }; 

  services.xserver.desktopManager.gnome.extraGSettingsOverrides = ''
  [org.gnome.shell]
  enabled-extensions=['appindicatorsupport@rgcjonas.gmail.com', 'dash-to-dock@micxgx.gmail.com', 'burn-my-windows@schneegans.github.com', 'tiling-shell@lemnoslife.github.com']
  
  # Configuration de Burn My Windows
  [org.gnome.desktop.interface]
  cursor-theme='Breeze_Light'
  '';

  systemd.user.services.configure-burn-my-windows = {
    description = "Configurer les animations de Burn My Windows";
    wantedBy = [ "default.target" ];
    script = ''
      # 3 animations d'ouverture
      ${pkgs.dconf}/bin/dconf write /org/gnome/shell/extensions/burn-my-windows/fire-open-effect true
      ${pkgs.dconf}/bin/dconf write /org/gnome/shell/extensions/burn-my-windows/fireworks-open-effect true
      ${pkgs.dconf}/bin/dconf write /org/gnome/shell/extensions/burn-my-windows/tv-open-effect true
      ${pkgs.dconf}/bin/dconf write /org/gnome/shell/extensions/burn-my-windows/fire-close-effect true
      ${pkgs.dconf}/bin/dconf write /org/gnome/shell/extensions/burn-my-windows/pixelate-close-effect true
    '';
  };

  
  # ENABLE GNOME EXTENSIONS
  programs.dconf.enable = true;

  ## ENABLE SWAP
  zramSwap.enable = true;
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.11"; # Did you read the comment?

}